"use strict";

function wrapper(my) {
    function response(req, start, clean) {
        var diff = process.hrtime(start);
        diff = 1e9 * diff[0] + diff[1];
        var data = req._bytesDispatched * my.byte / my.misura;
        return clean === !0 && (first = new Array(2), story._bytesDispatched = 0), (data / (diff / my.time)).toFixed(1) + my.out;
    }
    function request(req, start, clean) {
        var diff = process.hrtime(start);
        diff = 1e9 * diff[0] + diff[1];
        var data = req.bytesRead * my.byte / my.misura;
        return clean === !0 && (first = new Array(2), story.bytesRead = 0), (data / (diff / my.time)).toFixed(1) + my.out;
    }
    var oi = response;
    my.response || (oi = request);
    var first = new Array(2), story = {
        _bytesDispatched: 0,
        bytesRead: 0
    };
    return function(req, start) {
        function close() {
            story._bytesDispatched += soc._bytesDispatched, story.bytesRead += soc.bytesRead;
        }
        function finish() {
            if (cleanup(), first[1]) return story._bytesDispatched += soc._bytesDispatched, 
            story.bytesRead += soc.bytesRead, req.transferRate = oi(story, first, !0), req.transferRate;
        }
        function cleanup() {
            soc.removeListener("close", close);
        }
        if (!req || "object" != typeof req) throw new TypeError("req required");
        if (!start || Array.isArray(start) === !1) throw new TypeError("start required");
        var res = req.res;
        if (first[1] || (first = start), res.finished === !0) return req.transferRate = oi(req.socket, first), 
        req.transferRate;
        var soc = req.socket;
        soc.once("close", finish);
    };
}

function transfer(opt) {
    var options = opt || Object.create(null), my = {
        misura: 1024,
        byte: 1,
        out: " KB/s",
        time: 1e9,
        response: !0
    };
    return "Byte" == options.data ? (my.misura = 1, my.byte = 1, my.out = " Byte") : "KB" == options.data ? (my.misura = 1024, 
    my.byte = 1, my.out = " KB") : "MB" == options.data ? (my.misura = 1048576, my.byte = 1, 
    my.out = " MB") : "bit" == options.data ? (my.misura = 1, my.byte = 8, my.out = " bit") : "Kb" == options.data ? (my.misura = 1e3, 
    my.byte = 8, my.out = " Kbit") : "Mb" == options.data && (my.misura = 1e6, my.byte = 8, 
    my.out = " Mbit"), "nanosecond" == options.time ? (my.time = 1, my.out += "/ns") : "millisecond" == options.time ? (my.time = 1e6, 
    my.out += "/ms") : "second" == options.time && (my.time = 1e9, my.out += "/s"), 
    options.response === !1 && (my.response = !1), options.output === !1 && (my.out = ""), 
    wrapper(my);
}

module.exports = transfer;
